import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

const initialState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  currentIntervention: false,
  syndics: {
    addr: "15 avenue de la pinede",
    contacts: ["Brigitte"],
    nom: "Foncia",
    telephone: "0493477630"
  },
  users: {
    'DskAGRFuNsYbFg7fMot3xcyIuil2': {
      nom: 'Averbouch',
      prenom: 'David',
      role: 'dev',
      nbInter: 0,
      cagnotte: 0,
      completionInter: 0,
      dateEntree: '30/03/2009',
      dateNaissance: '05/05/1986',
      interventionListByDate: {
        '16/12/21': {
          '1xbjZ0RhORdOJeHLuQQtazu2nVc2': 129730903829
        }
      },
      mail: 'david.averbouch@gmail.com',
      messagesId: ['IdConversation'],
      mobile: '0622027591',
      notification: 'idNotif'
    }
  },
  interventions: {
    '1xbjZ0RhORdOJeHLuQQtazu2nVc2': {
      gestionnaire: 'w3Xbe9G51ebQjhDqSdKr47Q6w9D3',
      technicien: 'DskAGRFuNsYbFg7fMot3xcyIuil2',
      date: '16/12/21:14h15',
      duree: 8,
      id: '5234',
      titre: 'Changer le chauffe eau',
      agence: 'Foncia',
      nom: 'Dupond',
      prenom: 'Gerard',
      adresse: '15 avenue de la pinede',
      addr: [43.5558793, 7.012570299999999],
      telMobile: "0622027591",
      etat: 'TerminÃ©e',
      material: ['niveau'],
      taches: [{
        etat: 'complete',
        titre: 'changer le ballon d eau chaude',
        description: 'blablabla',
        image: ["url", "url 2", "..."],
        retourCommentaire: null,
        retourEtat: 1,
        retourPhoto: "rn_image_picker_lib_temp_9d55b68b-440c-41ef-a42c-0659c6c5dcd9.jpg",
        retourRaison: null,

      }]
    }
  },

  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
